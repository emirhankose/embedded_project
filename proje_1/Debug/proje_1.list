
proje_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000718  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007d4  080007dc  000107dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080007d4  080007d4  000107d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080007d8  080007d8  000107d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000107dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  080007dc  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000001c  080007dc  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000107dc  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000da9  00000000  00000000  00010804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000038d  00000000  00000000  000115ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000150  00000000  00000000  00011940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000118  00000000  00000000  00011a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00000b7e  00000000  00000000  00011ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000007a8  00000000  00000000  00012726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      00000053  00000000  00000000  00012ece  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000374  00000000  00000000  00012f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080007bc 	.word	0x080007bc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000004 	.word	0x20000004
 8000100:	080007bc 	.word	0x080007bc

08000104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000104:	b580      	push	{r7, lr}
 8000106:	b082      	sub	sp, #8
 8000108:	af00      	add	r7, sp, #0
 800010a:	0002      	movs	r2, r0
 800010c:	1dfb      	adds	r3, r7, #7
 800010e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000110:	1dfb      	adds	r3, r7, #7
 8000112:	781b      	ldrb	r3, [r3, #0]
 8000114:	2b7f      	cmp	r3, #127	; 0x7f
 8000116:	d809      	bhi.n	800012c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000118:	1dfb      	adds	r3, r7, #7
 800011a:	781b      	ldrb	r3, [r3, #0]
 800011c:	001a      	movs	r2, r3
 800011e:	231f      	movs	r3, #31
 8000120:	401a      	ands	r2, r3
 8000122:	4b04      	ldr	r3, [pc, #16]	; (8000134 <__NVIC_EnableIRQ+0x30>)
 8000124:	2101      	movs	r1, #1
 8000126:	4091      	lsls	r1, r2
 8000128:	000a      	movs	r2, r1
 800012a:	601a      	str	r2, [r3, #0]
  }
}
 800012c:	46c0      	nop			; (mov r8, r8)
 800012e:	46bd      	mov	sp, r7
 8000130:	b002      	add	sp, #8
 8000132:	bd80      	pop	{r7, pc}
 8000134:	e000e100 	.word	0xe000e100

08000138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000138:	b590      	push	{r4, r7, lr}
 800013a:	b083      	sub	sp, #12
 800013c:	af00      	add	r7, sp, #0
 800013e:	0002      	movs	r2, r0
 8000140:	6039      	str	r1, [r7, #0]
 8000142:	1dfb      	adds	r3, r7, #7
 8000144:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000146:	1dfb      	adds	r3, r7, #7
 8000148:	781b      	ldrb	r3, [r3, #0]
 800014a:	2b7f      	cmp	r3, #127	; 0x7f
 800014c:	d828      	bhi.n	80001a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800014e:	4a2f      	ldr	r2, [pc, #188]	; (800020c <__NVIC_SetPriority+0xd4>)
 8000150:	1dfb      	adds	r3, r7, #7
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	b25b      	sxtb	r3, r3
 8000156:	089b      	lsrs	r3, r3, #2
 8000158:	33c0      	adds	r3, #192	; 0xc0
 800015a:	009b      	lsls	r3, r3, #2
 800015c:	589b      	ldr	r3, [r3, r2]
 800015e:	1dfa      	adds	r2, r7, #7
 8000160:	7812      	ldrb	r2, [r2, #0]
 8000162:	0011      	movs	r1, r2
 8000164:	2203      	movs	r2, #3
 8000166:	400a      	ands	r2, r1
 8000168:	00d2      	lsls	r2, r2, #3
 800016a:	21ff      	movs	r1, #255	; 0xff
 800016c:	4091      	lsls	r1, r2
 800016e:	000a      	movs	r2, r1
 8000170:	43d2      	mvns	r2, r2
 8000172:	401a      	ands	r2, r3
 8000174:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000176:	683b      	ldr	r3, [r7, #0]
 8000178:	019b      	lsls	r3, r3, #6
 800017a:	22ff      	movs	r2, #255	; 0xff
 800017c:	401a      	ands	r2, r3
 800017e:	1dfb      	adds	r3, r7, #7
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	0018      	movs	r0, r3
 8000184:	2303      	movs	r3, #3
 8000186:	4003      	ands	r3, r0
 8000188:	00db      	lsls	r3, r3, #3
 800018a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800018c:	481f      	ldr	r0, [pc, #124]	; (800020c <__NVIC_SetPriority+0xd4>)
 800018e:	1dfb      	adds	r3, r7, #7
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	b25b      	sxtb	r3, r3
 8000194:	089b      	lsrs	r3, r3, #2
 8000196:	430a      	orrs	r2, r1
 8000198:	33c0      	adds	r3, #192	; 0xc0
 800019a:	009b      	lsls	r3, r3, #2
 800019c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800019e:	e031      	b.n	8000204 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001a0:	4a1b      	ldr	r2, [pc, #108]	; (8000210 <__NVIC_SetPriority+0xd8>)
 80001a2:	1dfb      	adds	r3, r7, #7
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	0019      	movs	r1, r3
 80001a8:	230f      	movs	r3, #15
 80001aa:	400b      	ands	r3, r1
 80001ac:	3b08      	subs	r3, #8
 80001ae:	089b      	lsrs	r3, r3, #2
 80001b0:	3306      	adds	r3, #6
 80001b2:	009b      	lsls	r3, r3, #2
 80001b4:	18d3      	adds	r3, r2, r3
 80001b6:	3304      	adds	r3, #4
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	1dfa      	adds	r2, r7, #7
 80001bc:	7812      	ldrb	r2, [r2, #0]
 80001be:	0011      	movs	r1, r2
 80001c0:	2203      	movs	r2, #3
 80001c2:	400a      	ands	r2, r1
 80001c4:	00d2      	lsls	r2, r2, #3
 80001c6:	21ff      	movs	r1, #255	; 0xff
 80001c8:	4091      	lsls	r1, r2
 80001ca:	000a      	movs	r2, r1
 80001cc:	43d2      	mvns	r2, r2
 80001ce:	401a      	ands	r2, r3
 80001d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	019b      	lsls	r3, r3, #6
 80001d6:	22ff      	movs	r2, #255	; 0xff
 80001d8:	401a      	ands	r2, r3
 80001da:	1dfb      	adds	r3, r7, #7
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	0018      	movs	r0, r3
 80001e0:	2303      	movs	r3, #3
 80001e2:	4003      	ands	r3, r0
 80001e4:	00db      	lsls	r3, r3, #3
 80001e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001e8:	4809      	ldr	r0, [pc, #36]	; (8000210 <__NVIC_SetPriority+0xd8>)
 80001ea:	1dfb      	adds	r3, r7, #7
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	001c      	movs	r4, r3
 80001f0:	230f      	movs	r3, #15
 80001f2:	4023      	ands	r3, r4
 80001f4:	3b08      	subs	r3, #8
 80001f6:	089b      	lsrs	r3, r3, #2
 80001f8:	430a      	orrs	r2, r1
 80001fa:	3306      	adds	r3, #6
 80001fc:	009b      	lsls	r3, r3, #2
 80001fe:	18c3      	adds	r3, r0, r3
 8000200:	3304      	adds	r3, #4
 8000202:	601a      	str	r2, [r3, #0]
}
 8000204:	46c0      	nop			; (mov r8, r8)
 8000206:	46bd      	mov	sp, r7
 8000208:	b003      	add	sp, #12
 800020a:	bd90      	pop	{r4, r7, pc}
 800020c:	e000e100 	.word	0xe000e100
 8000210:	e000ed00 	.word	0xe000ed00

08000214 <setKeypad>:
#include "keypad.h"

#include"stm32g0xx.h"

void setKeypad(){ //R1 ->A7(PA7) , R2 ->A5(PA11), R3 ->A6(PA6), R4 ->A4(PA12), C1 ->A3(PA5), C2 ->A2(PA4), C3 ->A1(PA1), C4 ->A0(PA0)
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0

	RCC ->IOPENR |=(1U<<0);
 8000218:	4b1d      	ldr	r3, [pc, #116]	; (8000290 <setKeypad+0x7c>)
 800021a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800021c:	4b1c      	ldr	r3, [pc, #112]	; (8000290 <setKeypad+0x7c>)
 800021e:	2101      	movs	r1, #1
 8000220:	430a      	orrs	r2, r1
 8000222:	635a      	str	r2, [r3, #52]	; 0x34

	//ROWS ARE OUTPUT COLUMNS ARE INPUT.
	GPIOA ->MODER &=~(15U<<0);
 8000224:	23a0      	movs	r3, #160	; 0xa0
 8000226:	05db      	lsls	r3, r3, #23
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	23a0      	movs	r3, #160	; 0xa0
 800022c:	05db      	lsls	r3, r3, #23
 800022e:	210f      	movs	r1, #15
 8000230:	438a      	bics	r2, r1
 8000232:	601a      	str	r2, [r3, #0]
	GPIOA ->MODER &=~(15U<<2*4);
 8000234:	23a0      	movs	r3, #160	; 0xa0
 8000236:	05db      	lsls	r3, r3, #23
 8000238:	681a      	ldr	r2, [r3, #0]
 800023a:	23a0      	movs	r3, #160	; 0xa0
 800023c:	05db      	lsls	r3, r3, #23
 800023e:	4915      	ldr	r1, [pc, #84]	; (8000294 <setKeypad+0x80>)
 8000240:	400a      	ands	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
	GPIOA ->MODER &=~(15U<<2*6);
 8000244:	23a0      	movs	r3, #160	; 0xa0
 8000246:	05db      	lsls	r3, r3, #23
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	23a0      	movs	r3, #160	; 0xa0
 800024c:	05db      	lsls	r3, r3, #23
 800024e:	4912      	ldr	r1, [pc, #72]	; (8000298 <setKeypad+0x84>)
 8000250:	400a      	ands	r2, r1
 8000252:	601a      	str	r2, [r3, #0]
	GPIOA ->MODER |=(5U<<2*6);
 8000254:	23a0      	movs	r3, #160	; 0xa0
 8000256:	05db      	lsls	r3, r3, #23
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	23a0      	movs	r3, #160	; 0xa0
 800025c:	05db      	lsls	r3, r3, #23
 800025e:	21a0      	movs	r1, #160	; 0xa0
 8000260:	01c9      	lsls	r1, r1, #7
 8000262:	430a      	orrs	r2, r1
 8000264:	601a      	str	r2, [r3, #0]
	GPIOA ->MODER &=~(15U<<2*11);
 8000266:	23a0      	movs	r3, #160	; 0xa0
 8000268:	05db      	lsls	r3, r3, #23
 800026a:	681a      	ldr	r2, [r3, #0]
 800026c:	23a0      	movs	r3, #160	; 0xa0
 800026e:	05db      	lsls	r3, r3, #23
 8000270:	490a      	ldr	r1, [pc, #40]	; (800029c <setKeypad+0x88>)
 8000272:	400a      	ands	r2, r1
 8000274:	601a      	str	r2, [r3, #0]
	GPIOA ->MODER |=(5U<<2*11);
 8000276:	23a0      	movs	r3, #160	; 0xa0
 8000278:	05db      	lsls	r3, r3, #23
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	23a0      	movs	r3, #160	; 0xa0
 800027e:	05db      	lsls	r3, r3, #23
 8000280:	21a0      	movs	r1, #160	; 0xa0
 8000282:	0449      	lsls	r1, r1, #17
 8000284:	430a      	orrs	r2, r1
 8000286:	601a      	str	r2, [r3, #0]
}
 8000288:	46c0      	nop			; (mov r8, r8)
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	40021000 	.word	0x40021000
 8000294:	fffff0ff 	.word	0xfffff0ff
 8000298:	ffff0fff 	.word	0xffff0fff
 800029c:	fc3fffff 	.word	0xfc3fffff

080002a0 <ext_interrupt_keypad>:

void ext_interrupt_keypad(){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	EXTI ->RTSR1 |=(1U<<0);
 80002a4:	4b34      	ldr	r3, [pc, #208]	; (8000378 <ext_interrupt_keypad+0xd8>)
 80002a6:	681a      	ldr	r2, [r3, #0]
 80002a8:	4b33      	ldr	r3, [pc, #204]	; (8000378 <ext_interrupt_keypad+0xd8>)
 80002aa:	2101      	movs	r1, #1
 80002ac:	430a      	orrs	r2, r1
 80002ae:	601a      	str	r2, [r3, #0]
	EXTI ->RTSR1 |=(1U<<1);
 80002b0:	4b31      	ldr	r3, [pc, #196]	; (8000378 <ext_interrupt_keypad+0xd8>)
 80002b2:	681a      	ldr	r2, [r3, #0]
 80002b4:	4b30      	ldr	r3, [pc, #192]	; (8000378 <ext_interrupt_keypad+0xd8>)
 80002b6:	2102      	movs	r1, #2
 80002b8:	430a      	orrs	r2, r1
 80002ba:	601a      	str	r2, [r3, #0]
	EXTI ->RTSR1 |=(1U<<4);
 80002bc:	4b2e      	ldr	r3, [pc, #184]	; (8000378 <ext_interrupt_keypad+0xd8>)
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	4b2d      	ldr	r3, [pc, #180]	; (8000378 <ext_interrupt_keypad+0xd8>)
 80002c2:	2110      	movs	r1, #16
 80002c4:	430a      	orrs	r2, r1
 80002c6:	601a      	str	r2, [r3, #0]
	EXTI ->RTSR1 |=(1U<<5);
 80002c8:	4b2b      	ldr	r3, [pc, #172]	; (8000378 <ext_interrupt_keypad+0xd8>)
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	4b2a      	ldr	r3, [pc, #168]	; (8000378 <ext_interrupt_keypad+0xd8>)
 80002ce:	2120      	movs	r1, #32
 80002d0:	430a      	orrs	r2, r1
 80002d2:	601a      	str	r2, [r3, #0]

	EXTI ->EXTICR[0] |=(1U<<0);
 80002d4:	4b28      	ldr	r3, [pc, #160]	; (8000378 <ext_interrupt_keypad+0xd8>)
 80002d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80002d8:	4b27      	ldr	r3, [pc, #156]	; (8000378 <ext_interrupt_keypad+0xd8>)
 80002da:	2101      	movs	r1, #1
 80002dc:	430a      	orrs	r2, r1
 80002de:	661a      	str	r2, [r3, #96]	; 0x60
	EXTI ->EXTICR[0] |=(1U<<8);
 80002e0:	4b25      	ldr	r3, [pc, #148]	; (8000378 <ext_interrupt_keypad+0xd8>)
 80002e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80002e4:	4b24      	ldr	r3, [pc, #144]	; (8000378 <ext_interrupt_keypad+0xd8>)
 80002e6:	2180      	movs	r1, #128	; 0x80
 80002e8:	0049      	lsls	r1, r1, #1
 80002ea:	430a      	orrs	r2, r1
 80002ec:	661a      	str	r2, [r3, #96]	; 0x60
	EXTI ->EXTICR[1] |=(1U<<0);
 80002ee:	4b22      	ldr	r3, [pc, #136]	; (8000378 <ext_interrupt_keypad+0xd8>)
 80002f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80002f2:	4b21      	ldr	r3, [pc, #132]	; (8000378 <ext_interrupt_keypad+0xd8>)
 80002f4:	2101      	movs	r1, #1
 80002f6:	430a      	orrs	r2, r1
 80002f8:	665a      	str	r2, [r3, #100]	; 0x64
	EXTI ->EXTICR[1] |=(1U<<8);
 80002fa:	4b1f      	ldr	r3, [pc, #124]	; (8000378 <ext_interrupt_keypad+0xd8>)
 80002fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80002fe:	4b1e      	ldr	r3, [pc, #120]	; (8000378 <ext_interrupt_keypad+0xd8>)
 8000300:	2180      	movs	r1, #128	; 0x80
 8000302:	0049      	lsls	r1, r1, #1
 8000304:	430a      	orrs	r2, r1
 8000306:	665a      	str	r2, [r3, #100]	; 0x64

	EXTI ->IMR1 |=(1U<<0);
 8000308:	4a1b      	ldr	r2, [pc, #108]	; (8000378 <ext_interrupt_keypad+0xd8>)
 800030a:	2380      	movs	r3, #128	; 0x80
 800030c:	58d3      	ldr	r3, [r2, r3]
 800030e:	491a      	ldr	r1, [pc, #104]	; (8000378 <ext_interrupt_keypad+0xd8>)
 8000310:	2201      	movs	r2, #1
 8000312:	4313      	orrs	r3, r2
 8000314:	2280      	movs	r2, #128	; 0x80
 8000316:	508b      	str	r3, [r1, r2]
	EXTI ->IMR1 |=(1U<<1);
 8000318:	4a17      	ldr	r2, [pc, #92]	; (8000378 <ext_interrupt_keypad+0xd8>)
 800031a:	2380      	movs	r3, #128	; 0x80
 800031c:	58d3      	ldr	r3, [r2, r3]
 800031e:	4916      	ldr	r1, [pc, #88]	; (8000378 <ext_interrupt_keypad+0xd8>)
 8000320:	2202      	movs	r2, #2
 8000322:	4313      	orrs	r3, r2
 8000324:	2280      	movs	r2, #128	; 0x80
 8000326:	508b      	str	r3, [r1, r2]
	EXTI ->IMR1 |=(1U<<4);
 8000328:	4a13      	ldr	r2, [pc, #76]	; (8000378 <ext_interrupt_keypad+0xd8>)
 800032a:	2380      	movs	r3, #128	; 0x80
 800032c:	58d3      	ldr	r3, [r2, r3]
 800032e:	4912      	ldr	r1, [pc, #72]	; (8000378 <ext_interrupt_keypad+0xd8>)
 8000330:	2210      	movs	r2, #16
 8000332:	4313      	orrs	r3, r2
 8000334:	2280      	movs	r2, #128	; 0x80
 8000336:	508b      	str	r3, [r1, r2]
	EXTI ->IMR1 |=(1U<<5);
 8000338:	4a0f      	ldr	r2, [pc, #60]	; (8000378 <ext_interrupt_keypad+0xd8>)
 800033a:	2380      	movs	r3, #128	; 0x80
 800033c:	58d3      	ldr	r3, [r2, r3]
 800033e:	490e      	ldr	r1, [pc, #56]	; (8000378 <ext_interrupt_keypad+0xd8>)
 8000340:	2220      	movs	r2, #32
 8000342:	4313      	orrs	r3, r2
 8000344:	2280      	movs	r2, #128	; 0x80
 8000346:	508b      	str	r3, [r1, r2]

	NVIC_SetPriority(EXTI0_1_IRQn,0);
 8000348:	2100      	movs	r1, #0
 800034a:	2005      	movs	r0, #5
 800034c:	f7ff fef4 	bl	8000138 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000350:	2005      	movs	r0, #5
 8000352:	f7ff fed7 	bl	8000104 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI2_3_IRQn,0);
 8000356:	2100      	movs	r1, #0
 8000358:	2006      	movs	r0, #6
 800035a:	f7ff feed 	bl	8000138 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI2_3_IRQn);
 800035e:	2006      	movs	r0, #6
 8000360:	f7ff fed0 	bl	8000104 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI4_15_IRQn,0);
 8000364:	2100      	movs	r1, #0
 8000366:	2007      	movs	r0, #7
 8000368:	f7ff fee6 	bl	8000138 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI4_15_IRQn);
 800036c:	2007      	movs	r0, #7
 800036e:	f7ff fec9 	bl	8000104 <__NVIC_EnableIRQ>

}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40021800 	.word	0x40021800

0800037c <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void){
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
	low_rows();
 8000380:	f000 f966 	bl	8000650 <low_rows>

	if((GPIOA->IDR>>5)&1){
 8000384:	23a0      	movs	r3, #160	; 0xa0
 8000386:	05db      	lsls	r3, r3, #23
 8000388:	691b      	ldr	r3, [r3, #16]
 800038a:	095b      	lsrs	r3, r3, #5
 800038c:	2201      	movs	r2, #1
 800038e:	4013      	ands	r3, r2
 8000390:	d034      	beq.n	80003fc <EXTI4_15_IRQHandler+0x80>
		toggle_r1();
 8000392:	f000 f927 	bl	80005e4 <toggle_r1>
		if((GPIOA->IDR>>5)&1)
 8000396:	23a0      	movs	r3, #160	; 0xa0
 8000398:	05db      	lsls	r3, r3, #23
 800039a:	691b      	ldr	r3, [r3, #16]
 800039c:	095b      	lsrs	r3, r3, #5
 800039e:	2201      	movs	r2, #1
 80003a0:	4013      	ands	r3, r2
 80003a2:	d001      	beq.n	80003a8 <EXTI4_15_IRQHandler+0x2c>
			ssdOne();
 80003a4:	f000 f8b8 	bl	8000518 <ssdOne>
		toggle_r1();
 80003a8:	f000 f91c 	bl	80005e4 <toggle_r1>

		toggle_r2();
 80003ac:	f000 f927 	bl	80005fe <toggle_r2>
		if((GPIOA->IDR>>5)&1)
 80003b0:	23a0      	movs	r3, #160	; 0xa0
 80003b2:	05db      	lsls	r3, r3, #23
 80003b4:	691b      	ldr	r3, [r3, #16]
 80003b6:	095b      	lsrs	r3, r3, #5
 80003b8:	2201      	movs	r2, #1
 80003ba:	4013      	ands	r3, r2
 80003bc:	d001      	beq.n	80003c2 <EXTI4_15_IRQHandler+0x46>
			ssdFour();
 80003be:	f000 f8c1 	bl	8000544 <ssdFour>
		toggle_r2();
 80003c2:	f000 f91c 	bl	80005fe <toggle_r2>

		toggle_r3();
 80003c6:	f000 f928 	bl	800061a <toggle_r3>
		if((GPIOA->IDR>>5)&1)
 80003ca:	23a0      	movs	r3, #160	; 0xa0
 80003cc:	05db      	lsls	r3, r3, #23
 80003ce:	691b      	ldr	r3, [r3, #16]
 80003d0:	095b      	lsrs	r3, r3, #5
 80003d2:	2201      	movs	r2, #1
 80003d4:	4013      	ands	r3, r2
 80003d6:	d001      	beq.n	80003dc <EXTI4_15_IRQHandler+0x60>
			ssdSeven();
 80003d8:	f000 f8da 	bl	8000590 <ssdSeven>
		toggle_r3();
 80003dc:	f000 f91d 	bl	800061a <toggle_r3>

		toggle_r4();
 80003e0:	f000 f928 	bl	8000634 <toggle_r4>
		if((GPIOA->IDR>>5)&1)
 80003e4:	23a0      	movs	r3, #160	; 0xa0
 80003e6:	05db      	lsls	r3, r3, #23
 80003e8:	691b      	ldr	r3, [r3, #16]
 80003ea:	095b      	lsrs	r3, r3, #5
 80003ec:	2201      	movs	r2, #1
 80003ee:	4013      	ands	r3, r2
 80003f0:	d001      	beq.n	80003f6 <EXTI4_15_IRQHandler+0x7a>
			ssdStar();
 80003f2:	f000 f8e9 	bl	80005c8 <ssdStar>
		toggle_r4();
 80003f6:	f000 f91d 	bl	8000634 <toggle_r4>
 80003fa:	e002      	b.n	8000402 <EXTI4_15_IRQHandler+0x86>
	}
	else if((GPIOA->IDR>>4)&1){
 80003fc:	23a0      	movs	r3, #160	; 0xa0
 80003fe:	05db      	lsls	r3, r3, #23
 8000400:	691b      	ldr	r3, [r3, #16]
		// 2  5 8 0  yanacak
	}

EXTI->RPR1 |=(1U<<0);
 8000402:	4b04      	ldr	r3, [pc, #16]	; (8000414 <EXTI4_15_IRQHandler+0x98>)
 8000404:	68da      	ldr	r2, [r3, #12]
 8000406:	4b03      	ldr	r3, [pc, #12]	; (8000414 <EXTI4_15_IRQHandler+0x98>)
 8000408:	2101      	movs	r1, #1
 800040a:	430a      	orrs	r2, r1
 800040c:	60da      	str	r2, [r3, #12]
}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	40021800 	.word	0x40021800

08000418 <EXTI0_1_IRQHandler>:


void EXTI0_1_IRQHandler(void){
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
	low_rows();
 800041c:	f000 f918 	bl	8000650 <low_rows>
	if((EXTI->RPR1>>1)&1){
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <EXTI0_1_IRQHandler+0x20>)
 8000422:	68db      	ldr	r3, [r3, #12]
 8000424:	085b      	lsrs	r3, r3, #1
 8000426:	2201      	movs	r2, #1
 8000428:	4013      	ands	r3, r2
 800042a:	d101      	bne.n	8000430 <EXTI0_1_IRQHandler+0x18>
		//3 6 9 # yanacak
	}
	else if((EXTI->RPR1)&1){
 800042c:	4b02      	ldr	r3, [pc, #8]	; (8000438 <EXTI0_1_IRQHandler+0x20>)
 800042e:	68db      	ldr	r3, [r3, #12]
		//harfler hanacak
	}

}
 8000430:	46c0      	nop			; (mov r8, r8)
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	40021800 	.word	0x40021800

0800043c <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void){
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	////
}
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
	...

08000448 <setSSD>:

void setSSD(){ //D1->D12(PB4), A->D11(PB5), F->D10(PB9), D2->D9(PA8), D3->D8(PB8), B->D7(PB2),
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
			  //E->D1(PB6), D->D0(PB7), dec->D3(PB1),C->D4(PA10),G->D5(PA9),D4->D6(PB0)
RCC ->IOPENR |=(3U<<0);
 800044c:	4b2c      	ldr	r3, [pc, #176]	; (8000500 <setSSD+0xb8>)
 800044e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000450:	4b2b      	ldr	r3, [pc, #172]	; (8000500 <setSSD+0xb8>)
 8000452:	2103      	movs	r1, #3
 8000454:	430a      	orrs	r2, r1
 8000456:	635a      	str	r2, [r3, #52]	; 0x34

GPIOA ->MODER &=~(63U<<2*7);
 8000458:	23a0      	movs	r3, #160	; 0xa0
 800045a:	05db      	lsls	r3, r3, #23
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	23a0      	movs	r3, #160	; 0xa0
 8000460:	05db      	lsls	r3, r3, #23
 8000462:	4928      	ldr	r1, [pc, #160]	; (8000504 <setSSD+0xbc>)
 8000464:	400a      	ands	r2, r1
 8000466:	601a      	str	r2, [r3, #0]
GPIOA ->MODER |=(21U<<2*7);
 8000468:	23a0      	movs	r3, #160	; 0xa0
 800046a:	05db      	lsls	r3, r3, #23
 800046c:	681a      	ldr	r2, [r3, #0]
 800046e:	23a0      	movs	r3, #160	; 0xa0
 8000470:	05db      	lsls	r3, r3, #23
 8000472:	21a8      	movs	r1, #168	; 0xa8
 8000474:	02c9      	lsls	r1, r1, #11
 8000476:	430a      	orrs	r2, r1
 8000478:	601a      	str	r2, [r3, #0]

GPIOB ->MODER &=~(15U<<2*8);
 800047a:	4b23      	ldr	r3, [pc, #140]	; (8000508 <setSSD+0xc0>)
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	4b22      	ldr	r3, [pc, #136]	; (8000508 <setSSD+0xc0>)
 8000480:	4922      	ldr	r1, [pc, #136]	; (800050c <setSSD+0xc4>)
 8000482:	400a      	ands	r2, r1
 8000484:	601a      	str	r2, [r3, #0]
GPIOB ->MODER |=(5U<<2*8);
 8000486:	4b20      	ldr	r3, [pc, #128]	; (8000508 <setSSD+0xc0>)
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	4b1f      	ldr	r3, [pc, #124]	; (8000508 <setSSD+0xc0>)
 800048c:	21a0      	movs	r1, #160	; 0xa0
 800048e:	02c9      	lsls	r1, r1, #11
 8000490:	430a      	orrs	r2, r1
 8000492:	601a      	str	r2, [r3, #0]
GPIOB ->MODER &=~(15U<<2*6);
 8000494:	4b1c      	ldr	r3, [pc, #112]	; (8000508 <setSSD+0xc0>)
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	4b1b      	ldr	r3, [pc, #108]	; (8000508 <setSSD+0xc0>)
 800049a:	491d      	ldr	r1, [pc, #116]	; (8000510 <setSSD+0xc8>)
 800049c:	400a      	ands	r2, r1
 800049e:	601a      	str	r2, [r3, #0]
GPIOB ->MODER |=(5U<<2*6);
 80004a0:	4b19      	ldr	r3, [pc, #100]	; (8000508 <setSSD+0xc0>)
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	4b18      	ldr	r3, [pc, #96]	; (8000508 <setSSD+0xc0>)
 80004a6:	21a0      	movs	r1, #160	; 0xa0
 80004a8:	01c9      	lsls	r1, r1, #7
 80004aa:	430a      	orrs	r2, r1
 80004ac:	601a      	str	r2, [r3, #0]
GPIOB ->MODER &=~(15U<<2*4);
 80004ae:	4b16      	ldr	r3, [pc, #88]	; (8000508 <setSSD+0xc0>)
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	4b15      	ldr	r3, [pc, #84]	; (8000508 <setSSD+0xc0>)
 80004b4:	4917      	ldr	r1, [pc, #92]	; (8000514 <setSSD+0xcc>)
 80004b6:	400a      	ands	r2, r1
 80004b8:	601a      	str	r2, [r3, #0]
GPIOB ->MODER |=(5U<<2*4);
 80004ba:	4b13      	ldr	r3, [pc, #76]	; (8000508 <setSSD+0xc0>)
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	4b12      	ldr	r3, [pc, #72]	; (8000508 <setSSD+0xc0>)
 80004c0:	21a0      	movs	r1, #160	; 0xa0
 80004c2:	00c9      	lsls	r1, r1, #3
 80004c4:	430a      	orrs	r2, r1
 80004c6:	601a      	str	r2, [r3, #0]
GPIOB ->MODER &=~(15U<<2);
 80004c8:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <setSSD+0xc0>)
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <setSSD+0xc0>)
 80004ce:	213c      	movs	r1, #60	; 0x3c
 80004d0:	438a      	bics	r2, r1
 80004d2:	601a      	str	r2, [r3, #0]
GPIOB ->MODER |=(5U<<2);
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <setSSD+0xc0>)
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <setSSD+0xc0>)
 80004da:	2114      	movs	r1, #20
 80004dc:	430a      	orrs	r2, r1
 80004de:	601a      	str	r2, [r3, #0]
GPIOB ->MODER &=~(3U<<0);
 80004e0:	4b09      	ldr	r3, [pc, #36]	; (8000508 <setSSD+0xc0>)
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <setSSD+0xc0>)
 80004e6:	2103      	movs	r1, #3
 80004e8:	438a      	bics	r2, r1
 80004ea:	601a      	str	r2, [r3, #0]
GPIOB ->MODER |=(1U<<0);
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <setSSD+0xc0>)
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	4b05      	ldr	r3, [pc, #20]	; (8000508 <setSSD+0xc0>)
 80004f2:	2101      	movs	r1, #1
 80004f4:	430a      	orrs	r2, r1
 80004f6:	601a      	str	r2, [r3, #0]
}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	40021000 	.word	0x40021000
 8000504:	fff03fff 	.word	0xfff03fff
 8000508:	50000400 	.word	0x50000400
 800050c:	fff0ffff 	.word	0xfff0ffff
 8000510:	ffff0fff 	.word	0xffff0fff
 8000514:	fffff0ff 	.word	0xfffff0ff

08000518 <ssdOne>:

void ssdOne(){ // B  C
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0

	GPIOA->ODR |=(1U<<10);
 800051c:	23a0      	movs	r3, #160	; 0xa0
 800051e:	05db      	lsls	r3, r3, #23
 8000520:	695a      	ldr	r2, [r3, #20]
 8000522:	23a0      	movs	r3, #160	; 0xa0
 8000524:	05db      	lsls	r3, r3, #23
 8000526:	2180      	movs	r1, #128	; 0x80
 8000528:	00c9      	lsls	r1, r1, #3
 800052a:	430a      	orrs	r2, r1
 800052c:	615a      	str	r2, [r3, #20]
	GPIOB->ODR |=(1U<<2);
 800052e:	4b04      	ldr	r3, [pc, #16]	; (8000540 <ssdOne+0x28>)
 8000530:	695a      	ldr	r2, [r3, #20]
 8000532:	4b03      	ldr	r3, [pc, #12]	; (8000540 <ssdOne+0x28>)
 8000534:	2104      	movs	r1, #4
 8000536:	430a      	orrs	r2, r1
 8000538:	615a      	str	r2, [r3, #20]
}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	50000400 	.word	0x50000400

08000544 <ssdFour>:
	GPIOB->ODR |=(1U<<2);
	GPIOA->ODR |=(1U<<10);
	GPIOA->ODR |=(1U<<9);
	GPIOB->ODR |=(1U<<7);
}
void ssdFour(){ //F G B C
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	GPIOA->ODR |=(1U<<9);
 8000548:	23a0      	movs	r3, #160	; 0xa0
 800054a:	05db      	lsls	r3, r3, #23
 800054c:	695a      	ldr	r2, [r3, #20]
 800054e:	23a0      	movs	r3, #160	; 0xa0
 8000550:	05db      	lsls	r3, r3, #23
 8000552:	2180      	movs	r1, #128	; 0x80
 8000554:	0089      	lsls	r1, r1, #2
 8000556:	430a      	orrs	r2, r1
 8000558:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |=(1U<<10);
 800055a:	23a0      	movs	r3, #160	; 0xa0
 800055c:	05db      	lsls	r3, r3, #23
 800055e:	695a      	ldr	r2, [r3, #20]
 8000560:	23a0      	movs	r3, #160	; 0xa0
 8000562:	05db      	lsls	r3, r3, #23
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	00c9      	lsls	r1, r1, #3
 8000568:	430a      	orrs	r2, r1
 800056a:	615a      	str	r2, [r3, #20]
	GPIOB->ODR |=(1U<<2);
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <ssdFour+0x48>)
 800056e:	695a      	ldr	r2, [r3, #20]
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <ssdFour+0x48>)
 8000572:	2104      	movs	r1, #4
 8000574:	430a      	orrs	r2, r1
 8000576:	615a      	str	r2, [r3, #20]
	GPIOB->ODR |=(1U<<9);
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <ssdFour+0x48>)
 800057a:	695a      	ldr	r2, [r3, #20]
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <ssdFour+0x48>)
 800057e:	2180      	movs	r1, #128	; 0x80
 8000580:	0089      	lsls	r1, r1, #2
 8000582:	430a      	orrs	r2, r1
 8000584:	615a      	str	r2, [r3, #20]

}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	50000400 	.word	0x50000400

08000590 <ssdSeven>:
	GPIOA->ODR |=(1U<<9);
	GPIOA->ODR |=(1U<<10);
	GPIOB->ODR |=(1U<<7);
	GPIOB->ODR |=(1U<<6);
}
void ssdSeven(){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	GPIOA->ODR |=(1U<<10);
 8000594:	23a0      	movs	r3, #160	; 0xa0
 8000596:	05db      	lsls	r3, r3, #23
 8000598:	695a      	ldr	r2, [r3, #20]
 800059a:	23a0      	movs	r3, #160	; 0xa0
 800059c:	05db      	lsls	r3, r3, #23
 800059e:	2180      	movs	r1, #128	; 0x80
 80005a0:	00c9      	lsls	r1, r1, #3
 80005a2:	430a      	orrs	r2, r1
 80005a4:	615a      	str	r2, [r3, #20]
	GPIOB->ODR |=(1U<<2);
 80005a6:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <ssdSeven+0x34>)
 80005a8:	695a      	ldr	r2, [r3, #20]
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <ssdSeven+0x34>)
 80005ac:	2104      	movs	r1, #4
 80005ae:	430a      	orrs	r2, r1
 80005b0:	615a      	str	r2, [r3, #20]
	GPIOB->ODR |=(1U<<5);
 80005b2:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <ssdSeven+0x34>)
 80005b4:	695a      	ldr	r2, [r3, #20]
 80005b6:	4b03      	ldr	r3, [pc, #12]	; (80005c4 <ssdSeven+0x34>)
 80005b8:	2120      	movs	r1, #32
 80005ba:	430a      	orrs	r2, r1
 80005bc:	615a      	str	r2, [r3, #20]
}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	50000400 	.word	0x50000400

080005c8 <ssdStar>:
}
void ssdA();//amplitude
void ssdB();//frequency
void ssdC();//cycle through mode
void ssdD();//displaying mode
void ssdStar(){// dot
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0

	GPIOB->ODR |=(1U<<0);
 80005cc:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <ssdStar+0x18>)
 80005ce:	695a      	ldr	r2, [r3, #20]
 80005d0:	4b03      	ldr	r3, [pc, #12]	; (80005e0 <ssdStar+0x18>)
 80005d2:	2101      	movs	r1, #1
 80005d4:	430a      	orrs	r2, r1
 80005d6:	615a      	str	r2, [r3, #20]

}
 80005d8:	46c0      	nop			; (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	50000400 	.word	0x50000400

080005e4 <toggle_r1>:
void ssdSquare();// enter


void toggle_r1(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
GPIOA->ODR ^=(1U<<7);
 80005e8:	23a0      	movs	r3, #160	; 0xa0
 80005ea:	05db      	lsls	r3, r3, #23
 80005ec:	695a      	ldr	r2, [r3, #20]
 80005ee:	23a0      	movs	r3, #160	; 0xa0
 80005f0:	05db      	lsls	r3, r3, #23
 80005f2:	2180      	movs	r1, #128	; 0x80
 80005f4:	404a      	eors	r2, r1
 80005f6:	615a      	str	r2, [r3, #20]
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <toggle_r2>:
void toggle_r2(){
 80005fe:	b580      	push	{r7, lr}
 8000600:	af00      	add	r7, sp, #0
	GPIOA->ODR ^=(1U<<11);
 8000602:	23a0      	movs	r3, #160	; 0xa0
 8000604:	05db      	lsls	r3, r3, #23
 8000606:	695a      	ldr	r2, [r3, #20]
 8000608:	23a0      	movs	r3, #160	; 0xa0
 800060a:	05db      	lsls	r3, r3, #23
 800060c:	2180      	movs	r1, #128	; 0x80
 800060e:	0109      	lsls	r1, r1, #4
 8000610:	404a      	eors	r2, r1
 8000612:	615a      	str	r2, [r3, #20]
}
 8000614:	46c0      	nop			; (mov r8, r8)
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <toggle_r3>:

void toggle_r3(){
 800061a:	b580      	push	{r7, lr}
 800061c:	af00      	add	r7, sp, #0
	GPIOA->ODR ^=(1U<<6);
 800061e:	23a0      	movs	r3, #160	; 0xa0
 8000620:	05db      	lsls	r3, r3, #23
 8000622:	695a      	ldr	r2, [r3, #20]
 8000624:	23a0      	movs	r3, #160	; 0xa0
 8000626:	05db      	lsls	r3, r3, #23
 8000628:	2140      	movs	r1, #64	; 0x40
 800062a:	404a      	eors	r2, r1
 800062c:	615a      	str	r2, [r3, #20]
}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <toggle_r4>:

void toggle_r4(){
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	GPIOA->ODR ^=(1U<<12);
 8000638:	23a0      	movs	r3, #160	; 0xa0
 800063a:	05db      	lsls	r3, r3, #23
 800063c:	695a      	ldr	r2, [r3, #20]
 800063e:	23a0      	movs	r3, #160	; 0xa0
 8000640:	05db      	lsls	r3, r3, #23
 8000642:	2180      	movs	r1, #128	; 0x80
 8000644:	0149      	lsls	r1, r1, #5
 8000646:	404a      	eors	r2, r1
 8000648:	615a      	str	r2, [r3, #20]

}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <low_rows>:
void low_rows(){
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	GPIOA->ODR &=~(1U<<7);
 8000654:	23a0      	movs	r3, #160	; 0xa0
 8000656:	05db      	lsls	r3, r3, #23
 8000658:	695a      	ldr	r2, [r3, #20]
 800065a:	23a0      	movs	r3, #160	; 0xa0
 800065c:	05db      	lsls	r3, r3, #23
 800065e:	2180      	movs	r1, #128	; 0x80
 8000660:	438a      	bics	r2, r1
 8000662:	615a      	str	r2, [r3, #20]
	GPIOA->ODR &=~(1U<<11);
 8000664:	23a0      	movs	r3, #160	; 0xa0
 8000666:	05db      	lsls	r3, r3, #23
 8000668:	695a      	ldr	r2, [r3, #20]
 800066a:	23a0      	movs	r3, #160	; 0xa0
 800066c:	05db      	lsls	r3, r3, #23
 800066e:	490b      	ldr	r1, [pc, #44]	; (800069c <low_rows+0x4c>)
 8000670:	400a      	ands	r2, r1
 8000672:	615a      	str	r2, [r3, #20]
	GPIOA->ODR &=~(1U<<6);
 8000674:	23a0      	movs	r3, #160	; 0xa0
 8000676:	05db      	lsls	r3, r3, #23
 8000678:	695a      	ldr	r2, [r3, #20]
 800067a:	23a0      	movs	r3, #160	; 0xa0
 800067c:	05db      	lsls	r3, r3, #23
 800067e:	2140      	movs	r1, #64	; 0x40
 8000680:	438a      	bics	r2, r1
 8000682:	615a      	str	r2, [r3, #20]
	GPIOA->ODR &=~(1U<<12);
 8000684:	23a0      	movs	r3, #160	; 0xa0
 8000686:	05db      	lsls	r3, r3, #23
 8000688:	695a      	ldr	r2, [r3, #20]
 800068a:	23a0      	movs	r3, #160	; 0xa0
 800068c:	05db      	lsls	r3, r3, #23
 800068e:	4904      	ldr	r1, [pc, #16]	; (80006a0 <low_rows+0x50>)
 8000690:	400a      	ands	r2, r1
 8000692:	615a      	str	r2, [r3, #20]
}
 8000694:	46c0      	nop			; (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	fffff7ff 	.word	0xfffff7ff
 80006a0:	ffffefff 	.word	0xffffefff

080006a4 <high_rows>:
void high_rows(){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	GPIOA->ODR |=(1U<<7);
 80006a8:	23a0      	movs	r3, #160	; 0xa0
 80006aa:	05db      	lsls	r3, r3, #23
 80006ac:	695a      	ldr	r2, [r3, #20]
 80006ae:	23a0      	movs	r3, #160	; 0xa0
 80006b0:	05db      	lsls	r3, r3, #23
 80006b2:	2180      	movs	r1, #128	; 0x80
 80006b4:	430a      	orrs	r2, r1
 80006b6:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |=(1U<<11);
 80006b8:	23a0      	movs	r3, #160	; 0xa0
 80006ba:	05db      	lsls	r3, r3, #23
 80006bc:	695a      	ldr	r2, [r3, #20]
 80006be:	23a0      	movs	r3, #160	; 0xa0
 80006c0:	05db      	lsls	r3, r3, #23
 80006c2:	2180      	movs	r1, #128	; 0x80
 80006c4:	0109      	lsls	r1, r1, #4
 80006c6:	430a      	orrs	r2, r1
 80006c8:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |=(1U<<6);
 80006ca:	23a0      	movs	r3, #160	; 0xa0
 80006cc:	05db      	lsls	r3, r3, #23
 80006ce:	695a      	ldr	r2, [r3, #20]
 80006d0:	23a0      	movs	r3, #160	; 0xa0
 80006d2:	05db      	lsls	r3, r3, #23
 80006d4:	2140      	movs	r1, #64	; 0x40
 80006d6:	430a      	orrs	r2, r1
 80006d8:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |=(1U<<12);
 80006da:	23a0      	movs	r3, #160	; 0xa0
 80006dc:	05db      	lsls	r3, r3, #23
 80006de:	695a      	ldr	r2, [r3, #20]
 80006e0:	23a0      	movs	r3, #160	; 0xa0
 80006e2:	05db      	lsls	r3, r3, #23
 80006e4:	2180      	movs	r1, #128	; 0x80
 80006e6:	0149      	lsls	r1, r1, #5
 80006e8:	430a      	orrs	r2, r1
 80006ea:	615a      	str	r2, [r3, #20]
}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <main>:
void EXTI4_15_IRQHandler(void);
void EXTI0_1_IRQHandler(void);
void EXTI2_3_IRQHandler(void);


int main(){
 80006f4:	b510      	push	{r4, lr}

	setSSD();
 80006f6:	f7ff fea7 	bl	8000448 <setSSD>
	setKeypad();
 80006fa:	f7ff fd8b 	bl	8000214 <setKeypad>
	high_rows();
 80006fe:	f7ff ffd1 	bl	80006a4 <high_rows>
	ext_interrupt_keypad();
 8000702:	f7ff fdcd 	bl	80002a0 <ext_interrupt_keypad>

while(1){
 8000706:	e7fe      	b.n	8000706 <main+0x12>

08000708 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000708:	480d      	ldr	r0, [pc, #52]	; (8000740 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800070a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800070c:	f000 f826 	bl	800075c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000710:	480c      	ldr	r0, [pc, #48]	; (8000744 <LoopForever+0x6>)
  ldr r1, =_edata
 8000712:	490d      	ldr	r1, [pc, #52]	; (8000748 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000714:	4a0d      	ldr	r2, [pc, #52]	; (800074c <LoopForever+0xe>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000718:	e002      	b.n	8000720 <LoopCopyDataInit>

0800071a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800071c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071e:	3304      	adds	r3, #4

08000720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000724:	d3f9      	bcc.n	800071a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000726:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000728:	4c0a      	ldr	r4, [pc, #40]	; (8000754 <LoopForever+0x16>)
  movs r3, #0
 800072a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800072c:	e001      	b.n	8000732 <LoopFillZerobss>

0800072e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000730:	3204      	adds	r2, #4

08000732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000734:	d3fb      	bcc.n	800072e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000736:	f000 f81d 	bl	8000774 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800073a:	f7ff ffdb 	bl	80006f4 <main>

0800073e <LoopForever>:

LoopForever:
    b LoopForever
 800073e:	e7fe      	b.n	800073e <LoopForever>
  ldr   r0, =_estack
 8000740:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000748:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800074c:	080007dc 	.word	0x080007dc
  ldr r2, =_sbss
 8000750:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000754:	2000001c 	.word	0x2000001c

08000758 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000758:	e7fe      	b.n	8000758 <ADC_COMP_IRQHandler>
	...

0800075c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000760:	4b03      	ldr	r3, [pc, #12]	; (8000770 <SystemInit+0x14>)
 8000762:	2280      	movs	r2, #128	; 0x80
 8000764:	0512      	lsls	r2, r2, #20
 8000766:	609a      	str	r2, [r3, #8]
#endif
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <__libc_init_array>:
 8000774:	b570      	push	{r4, r5, r6, lr}
 8000776:	2600      	movs	r6, #0
 8000778:	4d0c      	ldr	r5, [pc, #48]	; (80007ac <__libc_init_array+0x38>)
 800077a:	4c0d      	ldr	r4, [pc, #52]	; (80007b0 <__libc_init_array+0x3c>)
 800077c:	1b64      	subs	r4, r4, r5
 800077e:	10a4      	asrs	r4, r4, #2
 8000780:	42a6      	cmp	r6, r4
 8000782:	d109      	bne.n	8000798 <__libc_init_array+0x24>
 8000784:	2600      	movs	r6, #0
 8000786:	f000 f819 	bl	80007bc <_init>
 800078a:	4d0a      	ldr	r5, [pc, #40]	; (80007b4 <__libc_init_array+0x40>)
 800078c:	4c0a      	ldr	r4, [pc, #40]	; (80007b8 <__libc_init_array+0x44>)
 800078e:	1b64      	subs	r4, r4, r5
 8000790:	10a4      	asrs	r4, r4, #2
 8000792:	42a6      	cmp	r6, r4
 8000794:	d105      	bne.n	80007a2 <__libc_init_array+0x2e>
 8000796:	bd70      	pop	{r4, r5, r6, pc}
 8000798:	00b3      	lsls	r3, r6, #2
 800079a:	58eb      	ldr	r3, [r5, r3]
 800079c:	4798      	blx	r3
 800079e:	3601      	adds	r6, #1
 80007a0:	e7ee      	b.n	8000780 <__libc_init_array+0xc>
 80007a2:	00b3      	lsls	r3, r6, #2
 80007a4:	58eb      	ldr	r3, [r5, r3]
 80007a6:	4798      	blx	r3
 80007a8:	3601      	adds	r6, #1
 80007aa:	e7f2      	b.n	8000792 <__libc_init_array+0x1e>
 80007ac:	080007d4 	.word	0x080007d4
 80007b0:	080007d4 	.word	0x080007d4
 80007b4:	080007d4 	.word	0x080007d4
 80007b8:	080007d8 	.word	0x080007d8

080007bc <_init>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007c2:	bc08      	pop	{r3}
 80007c4:	469e      	mov	lr, r3
 80007c6:	4770      	bx	lr

080007c8 <_fini>:
 80007c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007ce:	bc08      	pop	{r3}
 80007d0:	469e      	mov	lr, r3
 80007d2:	4770      	bx	lr
